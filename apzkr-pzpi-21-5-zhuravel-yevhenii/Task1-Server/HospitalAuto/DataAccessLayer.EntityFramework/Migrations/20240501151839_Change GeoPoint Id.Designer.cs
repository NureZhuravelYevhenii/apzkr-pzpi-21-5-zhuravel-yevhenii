// <auto-generated />
using System;
using DataAccessLayer.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.EntityFramework.Migrations
{
    [DbContext(typeof(VetAutoContext))]
    [Migration("20240501151839_Change GeoPoint Id")]
    partial class ChangeGeoPointId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimalAnimalCenter", b =>
                {
                    b.Property<Guid>("AnimalCentersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalCentersId", "AnimalsId");

                    b.HasIndex("AnimalsId");

                    b.ToTable("AnimalAnimalCenter");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AnimalCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnimalCenters");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AnimalFeeder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountOfFood")
                        .HasColumnType("float");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FeedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FeederId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("FeederId");

                    b.ToTable("AnimalFeeders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AnimalType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnimalTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Feeder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Feeders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GeoPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeederId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FeederId")
                        .IsUnique();

                    b.ToTable("GeoPoints");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SensorTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalCenterId");

                    b.HasIndex("AnimalId");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SensorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SensorTypes");
                });

            modelBuilder.Entity("AnimalAnimalCenter", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AnimalCenter", null)
                        .WithMany()
                        .HasForeignKey("AnimalCentersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Animal", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AnimalType", "Type")
                        .WithMany("Animals")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AnimalFeeder", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Animal", "Animal")
                        .WithMany("AnimalFeeders")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Feeder", "Feeder")
                        .WithMany("AnimalFeeders")
                        .HasForeignKey("FeederId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Feeder");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.GeoPoint", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Feeder", "Feeder")
                        .WithOne("Location")
                        .HasForeignKey("DataAccessLayer.Entities.GeoPoint", "FeederId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feeder");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Sensor", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AnimalCenter", "AnimalCenter")
                        .WithMany()
                        .HasForeignKey("AnimalCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.SensorType", "SensorType")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("AnimalCenter");

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Animal", b =>
                {
                    b.Navigation("AnimalFeeders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.AnimalType", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Feeder", b =>
                {
                    b.Navigation("AnimalFeeders");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SensorType", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
