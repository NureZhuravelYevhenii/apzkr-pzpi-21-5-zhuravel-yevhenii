РЕФЕРАТ


Пояснювальна записка: 41 сторінки, 4 розділи, 32 рисунки, 6 джерел, 1 додаток. 
БАЗА ДАНИХ, СИСТЕМА ДОСЛІДЖЕННЯ ПОВЕДІНКИ ТВАРИН, ФЕРМА, ТВАРИНИ, АРХІТЕКТУРА, .NET, ASP.NET, REACT, ENTITY FRAMEWORK, MAUI.
Об’єктом дослідження є процес проектування комплексної програмної системи, що включає в себе декілька програмних застосунків.
Мета роботи – закріплення знань отриманих протягом курсу з архітектури програмного забезпечення та покращення практичних навичок програмування на платформі .NET та засобів розробки MAUI та React.
Розроблено програмна система, що складається з 4 програмних застосунків: серверна частина проєкту, програмна частина IoT девайсу, веб та мобільна частини.
Для всіх програмних застосунків були використані шарові архітектури з різною кількістю шарів та змінною ціллю їх використання.
Серверна частина була розроблена з допомогою фреймворку ASP.NET, що дає можливість створення REST орієнтованих API. Як база даних використовується MongoDb, для зв’язку з якою використовується написаний розробниками субд MongoDb Driver. Програмна частина складається з шару UI, бізнес логіки та зв’язку з базою даних. Для перетворення проміжних сутностей використовується AutoMapper.
Програмна частина IoT пристрою являє собою шаровий моноліт, який складається з шару UI, що має в собі компоненти, що реалізують шаблон Command, шару бізнес логіки та шару зв’язку з API. Як UI використовується консольний додаток написаний з використанням бібліотеки SpectreConsole.
Веб частина додатку написана з використанням бібліотеки React та будівельника програм Vite. Містить розділення на відповідні групи компонентів та сервіси, що спілкуються з API. Для інтернаціоналізації використовувалась бібліотека i18n.
Мобільна частина системи була створена з допомогою фреймворку MAUI. Використовувався шаровий моноліт. Шар UI представляє собою MVVM MAUI застосунок, також присутні шар бізнес логіки та шар зв’язку з API. Для відображення карти використовувалась бібліотека Mapsui.
 
ЗМІСТ

ВСТУП	9
1	АНАЛІЗ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ	11
1.1	Збір статистики по руху та активності тварин	11
1.2 Збір статистики про розміщення та використання устаткування та інфраструктури	12
1.3	Аналіз існуючих аналогів	13
1.3.1	Lely Horizon	13
1.3.2	AgriWebb	14
1.4	Концептуальне моделювання предметної області	15
2	ПОСТАНОВКА ЗАДАЧІ	18
2.1	Головна функціональність	18
2.2	Припущення та залежності	19
2.3	Межі першого випуску	21
2.4	Межі подальших випусків	22
2.5	Обмеження та виключення	22
3	ОПИС СЕРВЕРНОЇ ЧАСТИНИ ПРОЄКТУ	24
3.1	Архітектура та інженерні рішення	24
3.1.1	Шар обробки запитів	24
3.1.2	Шар бізнес логіки	24
3.1.3	Шар доступу до даних	25
3.1.4	Шар загальної функціональності	25
3.1.5	Локалізація	26
3.1.6	Загальна інформація	26
3.2 	Специфікація REST	27
3.3	Діаграма розгортання	27
3.4	Діаграма прецедентів	28
3.5	ER-модель даних	29
4	IOT ЧАСТИНА ПРОЄКТУ	31
4.1	Архітектура та інженерні рішення	31
4.1.1	Шар основної функціональності	31
4.1.2	Шар з’єднання з API	32
4.1.3	Шар UI	32
4.1.4	Шар загальної функціональності	32
4.1.6	Загальна інформація	33
4.2	Діаграма діяльности та діаграма взаємодії	33
4.3	Діаграма прецедентів	33
4.4	Діаграма пакетів	34
5	ОПИС ВЕБ ЧАСТИНИ ПРОЄКТУ	36
5.1	Архітектура та інженерні рішення	36
5.1.1	Сторінки списків	36
5.1.2	Сторінки деталей сутностей	36
5.1.3	Шар з’єднання з API	37
5.1.4	Локалізація	37
5.2	Діаграма компонент	37
5.3	Діаграма прецедентів	38
5.4	Діаграма пакетів	39
5.5	Діаграма станів	39
6	ОПИС МОБІЛЬНОЇ ЧАСТИНИ ПРОЄКТУ	41
6.1	Архітектура та інженерні рішення	41
6.1.1	Шар мобільного застосунку	41
6.1.2	Шар зв’язку з API	42
6.1.4	Локалізація	42
6.1.5	Загальна інформація	42
6.2	Діаграма компонент	43
6.3	Діаграма прецедентів	44
6.4	Діаграма пакетів	44
6.5	Діаграма станів	45
ВИСНОВКИ	46
СПИСОК ДЖЕРЕЛ	47


ВСТУП


Збір інформації про поведінку тварин є важливою складовою сучасного тваринництва та досліджень дикої природи. Ця інформація допомагає фермерам та дослідникам краще зрозуміти тварин, що, в свою чергу, веде до кращого догляду за ними, підвищення продуктивності, оптимізації господарської діяльності та кращого розуміння екосистем.
Традиційні методи збору інформації про поведінку тварин трудомісткі, потребують багато часу та схильні до людських помилок. До них належать:
-	Спостереження: Фермер, дослідник або натураліст особисто спостерігає за тваринами протягом певного часу, записуючи свої спостереження.
-	Відеоспостереження: Камери використовуються для запису поведінки тварин, а потім записи аналізуються вручну.
-	Ручні записи: Фермер, дослідник або натураліст записує дані про поведінку тварин у журнал або на комп'ютер.
Програмна система для дослідження поведінки тварин та збору інформації для фермерів та дослідників може значно полегшити та покращити цей процес. Завдяки автоматизації збору та аналізу даних, система може:
-	Зменшити час та витрати, пов'язані з дослідженням поведінки тварин.
-	Підвищити точність та надійність даних.
-	Надати фермерам та дослідникам нові уявлення про поведінку тварин, що допоможе їм приймати кращі рішення щодо догляду, управління та збереження.
Таким чином, програмна система для дослідження поведінки тварин та збору інформації для фермерів та дослідників є цінним інструментом, який може допомогти:
Фермерам:
-	Підвищити продуктивність своїх тварин.
-	Покращити добробут тварин.
-	Оптимізувати господарську діяльність та збільшити прибутки.
Дослідникам:
-	Краще зрозуміти поведінку тварин.
-	Зробити значний внесок у дослідження міграції тварин.
-	Розробити кращі стратегії збереження тварин.
ASP.NET є ефективним інструментом роботи з REST API, та має простір для змін стандартних механік для можливості створення застосунку, що матиме всі потрібні для подібної системи можливості [1].
MongoDb надає можливість користуватись неструктурованими даними та можливість горизонтального розширення, що дозволить зменшити вартість серверного обладнання а також розмістити це обладнання ближче до користувачів, що зменшить час відповіді [2].
React – бібліотека для створення SPA додатків, що підходять для системи перегляду статистики, яким і є наш продукт [3]. 
MAUI – фреймворк для розробки застосунків під велику кількість платформ, однією з яких є Android, тому він був вибраний через можливість в подальшому розширити асортимент продуктів у вигляду застосунків для IOS, Windows та Linux [4].
1	АНАЛІЗ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ


Система аналізу поведінки тварин призначена для збору та аналізу різноманітних статистичних даних про свійських та диких тварин. Вона дозволяє фермерам та дослідникам приймати обґрунтовані рішення щодо управління фермою, покращення умов утримання та збільшення продуктивності тварин на основі зібраних даних. Система підтримує автоматизоване фіксування та збір додаткових даних за допомогою технічного устаткування, а також введення даних вручну користувачами.
При вивченні та розділенні предметної області діяльності системи аналізу поведінки тварин, були виявлені такі фрагменти проблемної області:
збір статистики по руху та активності тварин;
збір статистики по харчуванню та споживанню ресурсів;
збір статистики за місцем розташування тварин;
збір статистики про взаємодію з іншими тваринами та середовищем;
збір статистики про розміщення та використання устаткування та інфраструктури.
В даній роботі буде розглянуто два фрагменти предметної області: збір статистики по руху та активності тварин та збір статистики про розміщення та використання устаткування та інфраструктури.


1.1	Збір статистики по руху та активності тварин


Розбираючи фрагмент «Збір статистики по руху та активності тварин», були виявлені наступні об’єкти, процеси та користувачі:
-	об’єкти: тварини, сенсори, дані активності;
-	процеси: фіксація даних активності, обробка даних, аналіз даних;
-	користувачі: фермери, дослідники.
Інформаційні потреби та результати діяльності кожної групи користувачів або підрозділів:
-	користувач потребує актуальну інформацію про активність тварин для моніторингу їх здоров'я та поведінки;
-	в результаті надається інформація у вигляді звітів та графіків активності тварин.
Загальні характеристики процесів споживання та обробки інформації:
-	дані активності фіксуються автоматично за допомогою годівниць;
-	дані повинні бути доступні у зручному для аналізу вигляді, наприклад, через веб-інтерфейс або мобільний додаток.


1.2 Збір статистики про розміщення та використання устаткування та інфраструктури


Розбираючи фрагмент «Збір статистики про розміщення та використання устаткування та інфраструктури», були виявлені наступні об’єкти, процеси та користувачі:
-	об’єкти: центри, годівниці;
-	процеси: моніторинг стану устаткування, відстеження використання інфраструктури, оптимізація ресурсів;
-	користувачі: фермери, менеджери.
Інформаційні потреби та результати діяльності кожної групи користувачів або підрозділів:
-	користувач потребує інформацію про стан та розташування устаткування для ефективного управління ресурсами ферми;
-	в результаті надається інформація у вигляді звітів про стан устаткування та його використання.
Загальні характеристики процесів споживання та обробки інформації:

-	дані про стан устаткування та його використання фіксуються автоматично за допомогою сенсорів та введення вручну;
-	дані повинні бути доступні у зручному для аналізу вигляді для прийняття управлінських рішень.


1.3	Аналіз існуючих аналогів


Більшість сервісів пропонують рішення для свійських тварин, через що більшість центрів дослідження поведінки тварин створюють свої або користуються партнерськими застосунками, через що публічних аналогів нашої системи мало.


1.3.1	Lely Horizon


Lely Horizon – система що об'єднує індивідуальні дані про корів з обладнання Lely з інформацією від третіх сторін в одному додатку. Містить поради відносно зібраних даних з ферми.
  
Рисунок 1 – Приклад сторінки тварини в застосунку Laly Horizon

Переваги нашого продукту над Lely Horizon:
-	Дослідження багатьох видів тварин, а не тільки корів.
-	Наявність датчиків для прямого слідкування за станом тварини, а не лише дані, що відслідковуються поверхнево чи фахівцем, такі як кількість з’їденого корму або статус запліднення.


1.3.2	AgriWebb


AgriWebb – сервіс, що надає дані для аналізу та роботи, має влаштовані способи розбиття ферми на зони, планування завдань та способи зберігання інформації про худобу та її дослідження.

 
Рисунок 2 – Список головних функцій сервісу AgriWebb

Переваги нашого сервісу над AgriWebb:
-	Використання пристроїв для збору інформації про тварин.


1.4	Концептуальне моделювання предметної області


На діаграмі прецедентів (рис. 3) Зображено функціональне призначення інформаційної системи, що створюється:

 
Рисунок 3 – Діаграма прецедентів

Для подальшого опису інформаційної системи було створено загальну діаграму класів (рис. 4), де зображуються основні сутності та їх відношення один до одного.

 
Рисунок 4 – Загальна діаграма класів

Була створена діаграма станів (рис. 5), що описує стани застосунку в різні моменти часу.

 
Рисунок 5 – Діаграма станів

Після дослідження сфери проєкту, його аналогів та після створення описових діаграм було розпочато постановку задачі.
2	ПОСТАНОВКА ЗАДАЧІ


Наша система аналізу поведінки тварин створює можливість фермерам та дослідникам збирати та аналізувати різноманітні статистичні дані про свійських та диких тварин. Ці дані включають в себе інформацію про активність, здоров'я, рухи, харчування та інші показники поведінки тварин. Наша система дозволяє фермерам та дослідникам приймати обґрунтовані рішення щодо управління фермою, покращення умов утримання та збільшення продуктивності тварин на основі цих даних. 
Розширений спектр статистичних даних досягається завдяки використанню технічного устаткування для автоматизованого фіксування та збору додаткових даних, а також можливості введення даних вручну користувачами. Наша мета - створити інноваційну систему, яка сприятиме зростанню продуктивності ферм та збереженню дикої природи через краще розуміння поведінки тварин.


2.1	Головна функціональність


В цьому підрозділі будуть перераховані основні функції системи. До них входять:
-	Збір статистики по руху та активності тварин. Функція, що дозволяє збирати дані про рух та активність тварин за допомогою сенсорів та датчиків, аналізувати ці дані і надавати інформацію про їхню поведінку та здоров'я.
-	Збір статистики по харчуванню та споживанню ресурсів. Функція, яка відстежує харчування тварин, витрату ресурсів (наприклад, води, корму) та інші аспекти їхнього життя для оцінки їхньої продуктивності та здоров'я.
-	Збір статистики за місцем розташування тварин. Функція, яка дозволяє відстежувати рухи тварин по місцях утримання (наприклад, вигул, стайня, пасовище) для вивчення їхньої поведінки та взаємодії з навколишнім середовищем.
-	Збір статистики по розмноженню та розвитку. Функція, яка надає інформацію про розмноження та розвиток тварин, включаючи кількість народжених потомства, швидкість росту та інші параметри репродуктивного процесу.
-	Збір статистики щодо здоров'я та медичного обстеження. Функція, яка дозволяє відстежувати стан здоров'я тварин, їхні медичні записи, вакцинації та інші медичні процедури для забезпечення їхнього добробуту та запобігання захворюванням.
-	Збір статистики про взаємодію з іншими тваринами та середовищем. Функція, яка дозволяє відстежувати соціальні взаємодії тварин між собою та їхню взаємодію з навколишнім середовищем, таким як контакт з іншими видами тварин або вплив на екосистему.
-	Збір статистики про розміщення та використання устаткування та інфраструктури. Функція, яка відстежує розміщення та використання устаткування, споруд та інфраструктури на фермі для оптимізації управління ресурсами та покращення умов утримання тварин.


2.2	Припущення та залежності


В цьому підрозділі будуть перераховані припущення та залежності, які є ключовими для клієнтів, щоб користуватись системою. До припущень відносяться:
-	Користувачі та підприємства будуть мати доступ до стабільного та надійного інтернет-з'єднання для передачі даних з пристроїв та доступу до сервісу аналізу поведінки тварин.
-	Не буде значних юридичних проблем щодо збору даних, конфіденційності або дотримання правил захисту даних, що може вплинути на можливість збору та обробки інформації про поведінку тварин.
До залежностей відносяться:
-	Доступність та якість зібраних статистичних даних буде залежати від функціональності та надійності технічних пристроїв, що використовуються для збору даних. Ці пристрої можуть потребувати регулярного технічного обслуговування та оновлень для забезпечення стабільної роботи системи збору даних.
-	Успіх платформи аналізу поведінки тварин буде залежати від залучення та утримання значної кількості підприємств та користувачів, які будуть активно користуватися сервісом. Це впливає на обсяг та якість зібраних даних та на загальну цінність платформи.
-	Функція монетизації платформи за допомогою Stripe залежить від успішної інтеграції платіжного шлюзу Stripe та його ефективності в обробці платежів і управлінні доходами. Це включає в себе залежність від функціональності та надійності інфраструктури Stripe.
-	Здатність платформи надавати аналітику даних в режимі реального часу та формувати графіки в реальному часі буде залежати від продуктивності та швидкості реагування базового програмного забезпечення і баз даних. Це може вплинути на здатність користувачів приймати обґрунтовані рішення на основі отриманих даних.





2.3	Межі першого випуску


Система буде розділена на чотири частини: серверна частина, веб застосунок, мобільний застосунок та IoT пристрої.
Початковий реліз проекту "Служба збору статистичних даних" включатиме наступні функції: 
IoT:
-	Можливість створити сеанс годування.
Web:
-	Реєстрація та авторизація.
-	Керування акаунтами центрів тварин.
-	Відображення найпопулярніших годівниць.
-	Відображення середньої кількості відвіданих годівниць одного виду тварин.
-	Відображення середньої кількості з’їденого корму.
-	Відображення найпопулярнішого дня тижня, місяця, сезону для годівниці.
-	Відображення відвіданих годівниць видом тварин за сезон.
Mobile:
-	Реєстрація та авторизація.
-	Керування акаунтами центрів тварин.
-	Конфігурація Smart device.
Серверна частина:
-	Реєстрація та авторизація.
-	Керування акаунтами співробітників.
-	Відображення найпопулярніших годівниць.
-	Відображення середньої кількості відвіданих годівниць одного виду тварин.
-	Відображення середньої кількості з’їденого корму.
-	Відображення найпопулярнішого дня тижня, місяця, сезону для годівниці.
-	Відображення відвіданих годівниць видом тварин за сезон.
Формат даних з допомогою якого буде відбуватись комунікація між частинами системи буде однаковим для всіх пристроїв, що полегшить обробку даних.  Для заощадження трафіку при транслюванні статистичних даних, дані будуть відправлятись періодично, а не одразу як дані були оброблені сервером. Доступ до системи користувачі матимуть на основі JWT токенів.


2.4	Межі подальших випусків


Web:
-	Відображення статистики по вакцинаціям.
-	Відображення статистики з регулярності мед огляду тварини.IoT:
-	Можливість отримати інформацію про стан тварини та її геолокацію.
Можливе збільшення кількості функцій в подальшій розробці.


2.5	Обмеження та виключення


До обмежень відносяться:
-	Платформа для аналізу поведінки тварин призначена виключно для внутрішнього використання фермерами, дослідниками та власниками ферм і не передбачається для публічного доступу або використання зовнішніми користувачами.
-	Робота платформи залежить від стабільного та надійного інтернет-з'єднання для доступу та використання її функцій. У випадку відсутності або нестабільності з'єднання може бути порушена продуктивність платформи.
-	Платформа для аналізу поведінки тварин не підтримує роботу в автономному режимі. Користувачі повинні мати доступ до мережі Інтернет для отримання доступу до функціональних можливостей платформи та їх використання.
До виключень відносяться:
-	Платформа не передбачає функцій, спрямованих на користувачів, що не є фермерами, дослідниками або власниками ферм, і не призначена для збору відгуків або оцінок від зовнішніх користувачів.
-	Платформа не призначена для керування або доступу до даних клієнтів, а також будь-якої іншої конфіденційної інформації, що забезпечує конфіденційність і безпеку даних клієнтів.
-	Платформа для аналізу поведінки тварин не має можливості здійснювати бронювання або керувати списками очікування для користувачів. Вона призначена виключно для внутрішнього аналізу та управління поведінкою тварин на фермі.


3	ОПИС СЕРВЕРНОЇ ЧАСТИНИ ПРОЄКТУ
3.1	Архітектура та інженерні рішення


Серверна частина системи - це моноліт з No-sql базою даних MongoDb. Моноліт складається з трьох шарів: ui шар, що становить собою сервер обробки HTTP запитів, шар бізнес логіки, в якому знаходяться сервіси для вторинної обробки запитів та шар доступу до даних, що з допомогою зв'язування з базою даних дає можливість керувати даними.


3.1.1	Шар обробки запитів 


Написаний з допомогою технології ASP.NET Core, включає в себе контролери для обробки запитів пов'язаних з сутностями та з допомогою Chain of Responsibility реєструються методи, наприклад, для обробки помилок. Також в цьому шарі реєструються сервіси для Dependency Injection, для створення об'єктів класів ефективно. Є реєстрація пакетів локалізацій, що знаходяться в загальному шарі Core, що дає можливість доступу до нього з усіх шарів моноліту з уникненням циклічних залежностей.


3.1.2	Шар бізнес логіки


Шар, що має в собі сервіси для обробки запитів по управлінню та отриманню сутностей. Більшість функціональності по управлінню сутностями описано в класі BaseCrudService, для уникнення дублювання коду, а для того, щоб програма відповідала принципу Solid Open-closed, методи, що можуть мати іншу реалізацію в класах наслідниках BaseCrudService, є віртуальними, для їх перевантаження. Для того, щоб користувач мав доступ лише до конкретних полей реальних сутностей бази даних, використовується mapping сутностей AutoMapper. Вся конфігурація для mapper описана в папці AutoMapper.


3.1.3	Шар доступу до даних


Шар, що містить реалізацію патерну repository для драйверу MongoDb для .NET платформи, що інкапсулюють логіку управління та читання даних з MongoDb бази даних. Як і в попередньому шарі, більшість логіки описана в загальному класі BaseRepository, який використовує альтернативну версію декоратора сутностей у вигляді атрибутів, конкретно CollectionName, що дає можливість вказати назву колекції, до якої відноситься сутність, що забезпечує правильну роботу при використанні більшості сутностей.


3.1.4	Шар загальної функціональності


Шар, що містить загальну функціональність, що може бути використана будь яким шаром. До неї відносяться загальні enum (Season, Month), кофнігурації, константи, локалізації, сервіси, що можуть бути використані в будь якому шарі (сервіс часу) та класи управління засобами метапрограмування платформи .NET Expression. З допомогою цих класів генеруються функції для керування станом сутностей, або отримання лямбда виразів для, наприклад, предикату пошуку сутності по ідентифікатору. Так як ці функції генеруються під час виконання програми, а також генеруються лише один раз, вони дозволяють не писати подібні функції вручну, що дозволяє уникнути великої кількості коду, що повторюється. Також в шарі доступу до даних, в реалізаціях патерну repository для конкретних сутностей, створені методи для агрегацій даних з бази даних, що дає можливість уникнути обробки великої кількості даних на стороні сервера, роблячи конкретні запити до бази даних. Наприклад так в AnimalFeederRepostory розраховуються найпопулярніші годівниці з допомогою групування записів по ідентифікатору годівниці та сортування результатів по спаданню кількості запитів. Подібні методи реалізовані і для AnimalRepository, AnimalTypeRepository, тощо.


3.1.5	Локалізація


Локалізація реалізована з допомогою реалізації інтерфейсу IStringLocalizer в бібілотеці Microsoft.AspNetCore.Localization. Він реєструється в файлі Program.cs з допомогою методу розширення AddLocalization, та бере .resx файли ресурсів, що знаходяться в шарі загальної функціональності.


3.1.6	Загальна інформація


Для більшості шарів створені бібліотеки інтерфейсів, що дають можливість відповідати принципу Solid Dependency Inversion, та залежати лише від абстракції, при цьому з можливістю заміни реалізації з допомогою налаштування стандартного контейнеру залежностей ASP.NET, чи контейнера бібліотеки AutoFac, що допомагає реєструвати сервіси ефективніше.
3.2 	Специфікація REST


В додатку А надана REST специфікація, що описує створений API шляхом надання інформації про кожен endpoint системи.


3.3	Діаграма розгортання


Було сформовано діаграму розгортання (рис. 6) для зображення елементів системи та їх зв’язку.

 
Рисунок 6 – Діаграма розгортання
Система складається з серверної частини, яка пов’язана з базою даних, та до якої звертаються web, mobile та Smart device частини проєкту, які для цього використовують протокол HTTP.


3.4	Діаграма прецедентів


Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (рис. 7). 

 
Рисунок 7 – Діаграма прецедентів

Система має два види користувачів: Зареєстрований користувач (є самим тваринним центром) та годівниця.


3.5	ER-модель даних


Для показання зв’язку сутностей, що фігурують в системі, була створена ER-модель даних (рис. 8).

 
Рисунок 8 – ER-модель даних

AnimalCenter може мати нуль або безліч сенсорів (Sensor), годівниць (Feeder) та тварин (Animal), які в свою чергу пов’язані з своїми типами (SensorType, FeederType, AnimalType), або додатковими сутностями (GeoPoint). Також тварини та годівниці пов’язані сутністю AnimalFeeder зв’язком один до багатьох, яка зберігає інформацію про годування тварини в даній годівниці. Сенсори пов’язані відношенням один до багатьох з твариною, так як він закріпляється за нею.
Була створена Package Diagram backend частини проєкту (рис. 9).

 
Рисунок 9 - Package Diagram

Back-end частина складається з модулю для роботи з базою даних (DAL), модулів для обробки даних (BLL та Adapters) та все це поєднується в модуль серверного застосунку (VetAuto). Додаткові функції та об’єкти знаходяться в модулі Core.
4	IOT ЧАСТИНА ПРОЄКТУ
4.1	Архітектура та інженерні рішення


Програмне забезпечення для IoT девайсу представляє собою моноліт для годівниці, що складається з декількох бібліотек-шарів, таких як: бібліотеки з основним функціоналом годівниці, бібліотеки для з’єднання з API, UI бібліотеки, в якій знаходяться класи що реалізують шаблон Command, які в подальшому можна прив’язати до елементів справжнього девайсу, а також бібліотека загальної функціональності, в якій знаходяться моделі конфігурації. Для всіх бібліотек представлені бібліотеки абстракцій, для дотримання принципу SOLID Dependency Inversion.


4.1.1	Шар основної функціональності 


Шар, що включає в себе реалізацію методів створення сеансів годування тварини, мається на увазі в фіксування моменту підходу тварини, кількості корму, яка зникла з годівниці, та після відходу від годівниці – відправлення даних на сервер. Ця бібліотека використовує бібліотеки для з’єднання з API а також отримує конфігурацію через Dependency Injection, або конфігурує модель конфігурації з допомогою отримання по Socket конфігурації з мобільного додатку.






4.1.2	Шар з’єднання з API


Шар, що дає спосіб звертання до API, конкретно створення моделі годівниці на сервері, отримання моделі годівниці, вказавши її координати, а також створення сеансу годування тварини. Шар використовує бібліотеку загальної функціональності та конфігурацію, яку отримує через Dependency Injection.


4.1.3	Шар UI


Шар що містить реалізації команд, які можуть бути зв’язані з елементами керування пристрою (в даній реалізації для спрощення тестування використовувався консольний додаток). Шар містить такі команди як: тварина підходить, тварина їсть, тварина відходить, завершення роботи, конфігурування з’єднання з API, конфігурування параметрів годівниці. Також в цьому шарі знаходиться файл запуску, який містить реєстрацію сервісів в контейнер.


4.1.4	Шар загальної функціональності


Шар містить моделі конфігурації додатку і клас, що реалізовує шаблон Fabric для створення HttpClient, для використання його в інших частинах програми. Також до цього шару відноситься шар зберігання конфігурацій, що надає конфігурацію при створенні моделі в ServiceProvider та зберігає конфігурацію при коректному завершені роботи.
4.1.6	Загальна інформація


Для більшості шарів створені бібліотеки інтерфейсів, що дають можливість відповідати принципу Solid Dependency Inversion, та залежати лише від абстракції, при цьому з можливістю заміни реалізації з допомогою налаштування стандартного контейнеру залежностей Microsoft, що допомагає реєструвати сервіси ефективніше.


4.2	Діаграма діяльности та діаграма взаємодії


Було сформовано діаграму діяльности (додаток Б) та взаємодії (додаток В), що показують можливі варіанти взаємодії з приладом.


4.3	Діаграма прецедентів


Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (рис. 10). 

 
Рисунок 10 – Діаграма прецедентів

Система має два види користувачів: Користувач, що налаштовує пристрій, та тварини, що ним користуються.


4.4	Діаграма пакетів


Була створена діаграма пакетів IoT частини (рис. 11), що описує як проєкт структурно був поділений на пакети.

 
Рисунок 11 – Діаграма пакетів

Ця частина проєкту складається з таких пакетів як VetAutoIoT.ApiLayer, VetAutoIoT.Core, VetAutoIoT.Console, VetAutoIoT.Persistence та VetAutoIoT. Вся їх функціональність була описана в попередніх розділах, а залежності показані на рисунку 11.



5	ОПИС ВЕБ ЧАСТИНИ ПРОЄКТУ
5.1	Архітектура та інженерні рішення


Front-end частина програмної системи реалізована з допомогою бібліотеки React та будівельника Vite [5]. Ця частина складається з основних файлів, потрібних для роботи будівельника та сторінок, розділених по папкам, наприклад views, entity-pages, тощо, що реалізовані з допомогою функціональних компонентів бібліотеки React. Ці компоненти об’єднуються з допомогою react-router-dom, для підтримки переходу між сторінками.


5.1.1	Сторінки списків 


Ці сторінки використовуються для відображення конкретних сутностей. Вони зроблені по базовому формату: виклик useEffect для отримання даних, зберігання цих даних в масив та відображення їх з допомогою методу map в елементи html. Також присутні кнопки для повернення, створення та зміни елементів. В деяких сутностях є можливість перейти на сторінку деталей. 


5.1.2	Сторінки деталей сутностей


Сторінки для відображеня деталей про сутності, наприклад в feeder details відображаються найпопулярніші дні тижня, місяця та сезони, а також показується розташування з допомогою бібліотеки роботи з картами. Для animal details відображається статистика по з’їденій їжі, а також, отримавши останні місця годування, відображає їх на карті, відсортувавши по даті.
5.1.3	Шар з’єднання з API


Шар, що містить створений та налаштований об’єкт axios, що додається бібліотекою axios, в якому реєструється interceptor для додавання токену доступу до кожного запиту, якщо користувач ввійшов (токен присутній в localstorage).


5.1.4	Локалізація


Локалізація реалізована з допомогою бібліотеки i18n [5] та файлів локалізацій. Присутні українська та англійська локалізації.


5.2	Діаграма компонент


Була створена діаграма компонентів (рис. 12), що показує як пов’язані сторінки сутностей з сервісами, та які елементи керування вони дають.

 
Рисунок 12 – Діаграма компонент

На цій діаграмі ми бачимо, що програму можна поділити на логічні компоненти для кожної сутності, які використовують компоненти AxiosHttpService для створення запитів та бібліотеку i18n для інтернаціоналізації.


5.3	Діаграма прецедентів


Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (додаток Г).
Система має три види користувачів: не зареєстрований користувач, зареєстрований користувач, годівниця.



5.4	Діаграма пакетів


Була створена діаграма пакетів front-end частини проєкту (рис. 13).

 
Рисунок 13 – Діаграма пакетів

Ця частина проєкту складається з таких пакетів як Components, Locales, EntityPages, froms, Views. Вся їх функціональність була описана в попередніх розділах, а залежності показані на рисунку 13.


5.5	Діаграма станів


Була стоврена діаграма станів (рис. 14), для відображення станів, в яких може бути застосунок.

 
Рисунок 14 – Діаграма станів

На діаграмі зображено, що програма має стани зареєстрованого користувача та незареєстрованого, які відрізняються подальшими станами. Так незареєстрований користувач може лише зареєструватись або ввійти, щоб далі перейти до стану зареєстрованого користувача та мати можливість керування сутностями.


6	ОПИС МОБІЛЬНОЇ ЧАСТИНИ ПРОЄКТУ
6.1	Архітектура та інженерні рішення


Mobile частина зроблена з допомогою MAUI, що дозволяє користувачам створювати застосунки для більшості популярних платформ, без написання коду спеціально під конкретну платформу напряму. Для реалізації використовувався шаблон MVVM, який дозволяє створити конкретні компоненти відображення View, які поєднуються з шаром бізнес логіки Model з допомогою середньої ланки ViewModel. Це дозволяє створювати застосунки, що залежать від наданих їм інтерфейсів в ViewModel, що спрощує реалізацію UI. Але я писав ViewModel з нуля, так як інші UI частини системи використовують інші технології.


6.1.1	Шар мобільного застосунку 


Цей шар використовує фреймворк MAUI для написання коду, який в подальшому компілюється в код специфічний для конкретної платформи. Цей шар складається з View, що написані з допомогою мови розмітки XAML, ViewModel, що реалізують шаблон Prod Cons з допомогою інтерфейсу INotifyPropertyChanged та бібліотеки для полегшення використання цього інтерфейсу CommunityToolkit. Цей шар звертається до шару зв’язку з API.






6.1.2	Шар зв’язку з API


Шар забезпечує реалізації методів для з’єднання з API, конкретні методи для створення моделей, авторизації, тощо. Цей шар використовує сутності з конфігураціями, котрі створюються ServiceProvider.


6.1.4	Локалізація


Локалізація реалізована з допомогою файлів ресурсів та ResourceManager. Файли ресурсів додаються як частина маніфесту програми, а ResourceManager вибирає файл, який потрібно зчитати судячи з додаткової інформації: MobileResources.en, де en – локалізація.


6.1.5	Загальна інформація


Всі сервіси реалізують абстракції, що забезпечує виконання принципу SOLID Dependency Inversion, а також допомагає в реалізації Dependency Injection, що спрощує створення сторінок, а також дає можливість спрощено їх додавати, не змінюючи при цьому написану розмітку основного застосунку.






6.2	Діаграма компонент


Була створена діаграма компонентів (рис. 15), що показує як пов’язані сторінки сутностей з сервісами, та які елементи керування вони дають.

 
Рисунок 15 – Діаграма компонент

На діаграмі ми бачимо приблизну схему компонентів, що базово відображає шаблон MVVM, де у нас є відображення для кожної сутності, які потім викликають відповідну логіку в сервісах, які також представлені для кожної сутності.





6.3	Діаграма прецедентів


Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (додаток Д).
Система має три види користувачів: не зареєстрований користувач, зареєстрований користувач, годівниця.


6.4	Діаграма пакетів


Була створена діаграма пакетів mobile частини проєкту (рис. 16).

 
Рисунок 16 – Діаграма пакетів

Ця частина проєкту складається з таких пакетів як Mobile (основна функціональність) та Mobile.ApiService. Вся їх функціональність була описана в попередніх розділах, а залежності показані на рисунку 16.

6.5	Діаграма станів


Була створена діаграма станів (рис. 17), для відображення станів, в яких може бути застосунок.

 
Рисунок 17 – Діаграма станів

На діаграмі зображено, що програма має стани зареєстрованого користувача та незареєстрованого, які відрізняються подальшими станами. Так незареєстрований користувач може лише зареєструватись або ввійти, щоб далі перейти до стану зареєстрованого користувача та мати можливість керування сутностями.




ВИСНОВКИ


Було створено складну систему, яка включає в себе серверну частину, Smart device частину, веб та мобільний застосунок. При написанні системи було використано такі технології: ASP.NET, для створення RESTful API; MongoDb, як система управління базою даних та MongoDb Driver для її використання (також для серверної частини використовувалась бібліотека для перетворення сутностей різних шарів – AutoMapper); React, для написання веб застосунку та Vite, для його побудови (для локалізації використовувалась бібліотека i18n); MAUI, для написання мобільного застосунку та Mapsui для відображення мапи; SpectreConsole, для створення консольного додатку, що симулює роботу Smart device.
В усіх проєктах написаних на платформі .NET використовувалась шарова архітектура моноліту, що представляє собою три шари (шар відображення, шар бізнес логіки та шар доступу до даних). В деяких частинах проєкту, шари могли бути модифіковані під доступ до даних, а також могли бути додаткова функціональність до шарів, як, наприклад, конфігурування Smart device з допомогою мобільного застосунку. Шар представлення мобільного застосунку було зроблено за архітектурою MVVM. Веб застосунок ділиться на представлення та сервіси локалізації, маршрутизації та зв’язку з API.
Створена система дає можливість керувати сутностями системи через веб або мобільний застосунок, відображати статистику, отриману після ручного внесення даних, або автоматично отриману від годівниць. Надає можливість безконтактної конфігурації елементів системи та забезпечує захист даних, використовуючи шифрування даних, використання пари токенів доступу та інше. Має локалізацію частин системи на англійську та українську мови.

СПИСОК ДЖЕРЕЛ

1.	ASP.NET overview. Дата звернення: 04.06.2024. Посилання: https://learn.microsoft.com/en-us/aspnet/overview 
2.	Офіційний сайт MongoDb. Дата звернення: 04.06.2024. Посилання: https://www.mongodb.com/ 
3.	Офіційний сайт React. Дата звернення: 04.06.2024. Посилання: https://react.dev/ 
4.	What is .NET MAUI? Дата звернення: 04.06.2024. Посилання: https://learn.microsoft.com/en-us/dotnet/maui/what-is-maui?view=net-maui-8.0
5.	Офіційний сайт Vite. Дата звернення: 04.06.2024. Посилання: https://vitejs.dev/
6.	Документація і18next. Дата звернення: 04.06.2024. Посилання: https://www.i18next.com/ 
Додаток А

В цьому додатку надані описові діаграми та REST специфікація для серверної частини проєкту.

Таблиця 1 – Специфікація REST API
Шлях	Метод	Призначення
/api/AnimalCenter/register	POST	Реєстрація в центрі тварин
/api/AnimalCenter/login	POST	Вхід в центр тварин
/api/AnimalCenter/refresh	POST	Оновлення токену доступу
/api/AnimalCenter	POST	Додавання нового запису в центр тварин
/api/AnimalCenter	GET	Отримання всіх записів в центрі тварин
/api/AnimalCenter	DELETE	Видалення запису з центру тварин
/api/AnimalCenter	PUT	Оновлення запису в центрі тварин
/api/AnimalCenter/single	GET	Отримання деталей про одну певну тварину в центрі
/api/Animals/create-animal-feeder	POST	Створення нового кормушки для тварини
/api/Animals/feeding/{id}	GET	Отримання інформації про годування тварини
/api/Animals/feeding-places/{id}	GET	Отримання місць годування для певної тварини
/api/Animals/no-eat/{id}	GET	Отримання інформації про їжу, яку не їсть тварина
/api/Animals/average-eaten-food/{id}	GET	Отримання середньої кількості спожитої їжі
/api/Animals	POST	Додавання нової тварини
/api/Animals	GET	Отримання всіх тварин
/api/Animals	DELETE	Видалення тварини
/api/Animals	PUT	Оновлення тварини
/api/Animals/single	GET	Отримання деталей про одну певну тварину
/api/animal-types/average-visited/{id}	GET	Отримання середньої кількості відвідувань


Продовження таблиці 1 – Специфікації REST API
/api/animal-types/feeders-visited-int-season/{id}	GET	Отримання інформації про кормушки, відвідані певним типом тварини в певний сезон
/api/animal-types	GET	Отримання всіх типів тварин
/api/animal-types	POST	Додавання нового типу тварини
/api/animal-types	DELETE	Видалення типу тварини
/api/animal-types	PUT	Оновлення типу тварини
/api/animal-types/single	GET	Отримання деталей про один певний тип тварини
/api/Feeders	POST	Створення нового кормушки
/api/Feeders	GET	Отримання всіх кормушок
/api/Feeders	DELETE	Видалення кормушки
/api/Feeders	PUT	Оновлення кормушки
/api/Feeders/popular	GET	Отримання популярних кормушок
/api/Feeders/{id}/popular-season	GET	Отримання популярного сезону для кормушки
/api/Feeders/{id}/popular-month	GET	Отримання популярного місяця для кормушки
/api/Feeders/{id}/popular-day-of-week	GET	Отримання популярного дня тижня для кормушки
/api/Feeders/single	GET	Отримання деталей про одну певну кормушку
/api/Sensors	POST	Створення нового датчика
/api/Sensors	GET	Отримання всіх датчиків
/api/Sensors	DELETE	Видалення датчика
/api/Sensors	PUT	Оновлення датчика
/api/Sensors/single	GET	Отримання деталей про один певний датчик
/api/sensor-types	POST	Створення нового типу датчика
/api/sensor-types	GET	Отримання всіх типів датчиків
/api/sensor-types	DELETE	Видалення типу датчика
/api/sensor-types	PUT	Оновлення типу датчика
/api/sensor-types/single	GET	Отримання деталей про один певний тип датчика

Додаток Б

Діаграма діяльности

 
Рисунок 18 – Діаграма діяльности
Додаток В

Діаграма взаємодії

 
Рисунок 19 – Діаграма взаємодії

Додаток Г

Діаграма прецедентів

 
Рисунок 20 – Діаграма прецедентів
Додаток Д

Діаграма прецедентів

 
Рисунок 21 – Діаграма прецедентів
Додаток Е


Рисунок 22 - Перевірка на плагіат
